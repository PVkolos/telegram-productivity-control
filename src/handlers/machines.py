import copy
import datetime

from create import bot, db
from aiogram import types
from States.users import Get_Sheets, Analysis, Days, Get_calendar, Analysis_events, Event, Quests, Time_analysis, Time_quests, Answer, Answer_Every_Day, Edit_quests_every_day
from Keyboards.reply import markup_reply_one, markup_reply_three, clear_keyboard, markup_reply_five, markup_reply_six, markup_reply_seven, markup_reply_eight, markup_reply_nine, markup_reply_ten
from Keyboards.inline import markup_inline_one
from Errors.errors import EmailError
from google_api import create_table, add_sheet, set_day_analysis, read, create_sheet_calendar, set_event_analysis, create_sheet_questions, set_answer, everyday_answer, edit_everyday_quests
from calendar_api import add_calendar, get_events
from dateutil.parser import parse


dct = dict()


async def edit_every_day_quests(message):
    await bot.send_message(message.from_user.id, '–í—ã —Ä–µ—à–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n<b>–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ö–ê–ñ–î–´–ô –° –ù–û–í–û–ô –°–¢–†–û–ö–ò!</b>', reply_markup=markup_reply_ten)
    await Edit_quests_every_day.quests_edit.set()


async def quests_edit(message, state):
    try:
        await state.finish()
        qsts = message.text.split('\n')
        db.update_info(message.from_user.id, 'everyday', 'Á†∫'.join(qsts))
        ans = await edit_everyday_quests(db.get_id_sheets(message.from_user.id), qsts)
        await bot.send_message(message.from_user.id, ans, reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await bot.send_message(message.from_user.id, '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ....')
        await bot.send_message(1229555610, f'G-Error: {str(e)}')


async def start_answer(message):
    try:
        quests_user = db.get_quests(message.from_user.id)[0][0]
        dct[message.from_user.id] = []
        text_sms = quests_user.split('.=.')[len(dct[message.from_user.id])]
        await bot.send_message(message.from_user.id, text_sms,  reply_markup=markup_reply_ten)
        await Answer.answer.set()
    except Exception as e:
        await bot.send_message(message.from_user.id, '–í—Ä–µ–º–µ–Ω–Ω–∞ –æ—à–∏–±–∫–∞. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ....')
        await bot.send_message(1229555610, f'F-Error: {str(e)}')


async def answer(message, state):
    dct[message.from_user.id].append(message.text)
    quests_user = db.get_quests(message.from_user.id)[0][0]
    if len(dct[message.from_user.id]) == len(quests_user.split('.=.')):
        ans = await set_answer(db.get_id_sheets(message.from_user.id), str(datetime.date.today()), dct[message.from_user.id])
        dct[message.from_user.id] = None
        await bot.send_message(message.from_user.id, ans, reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, quests_user.split('.=.')[len(dct[message.from_user.id])])


async def change_time_quests(message):
    await bot.send_message(message.from_user.id, '–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –∏–ª–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é?',
                           reply_markup=markup_reply_seven)
    await Time_quests.one_stage.set()


async def one_stage(message, state):
    if message.text == '–†–∞–∑ –≤ –º–µ—Å—è—Ü':
        await bot.send_message(message.from_user.id,
                               '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 28 (–¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–∞—Ö)')
        await Time_quests.next()
    elif message.text == '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é':
        await bot.send_message(message.from_user.id,
                               '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–∞—Ö)',
                               reply_markup=markup_reply_eight)
        await Time_quests.next()
    else:
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ!')


async def time_quests(message, state):
    if message.text.isdigit() and 1 <= int(message.text) < 29:
        await bot.send_message(message.from_user.id,
                               f'–û—Ç–ª–∏—á–Ω–æ. {message.text}-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!',
                               reply_markup=types.ReplyKeyboardRemove())
        db.update_info(message.from_user.id, 'time_of_quest', message.text)
        await state.finish()
    elif message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']:
        await bot.send_message(message.from_user.id,
                               f'–û—Ç–ª–∏—á–Ω–æ. –í –∫–∞–∂–¥—ã–π {message.text} –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!',
                               reply_markup=types.ReplyKeyboardRemove())
        db.update_info(message.from_user.id, 'time_of_quest', message.text)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')


async def change_time_if_day(message):
    await bot.send_message(message.from_user.id, '–ù–∏–∂–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ 24-—ë—Ö —á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã. (–ü—Ä–∏–º–µ—Ä:\n21-00)', reply_markup=markup_reply_nine)
    await Time_analysis.time_analysis.set()


async def time_analysis(message, state):
    if '-' in message.text and len(message.text) == 5 and message.text[0:2].isdigit() and message.text[3:5].isdigit() and int(message.text[0:2]) < 24 and int(message.text[3:5]) < 60:
        await bot.send_message(message.from_user.id, '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
        db.update_info(message.from_user.id, 'time_of_day', f'{message.text[0:2]}{message.text[3:5]}')
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (21-00)')


async def quests_start(message):
    await bot.send_message(message.from_user.id,
                           '–í—ã —Ä–µ—à–∏–ª–∏ –¥–∞—Ç—å –±–æ—Ç—É —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Å–µ—Ö –≤ <b>–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ</b>.',
                           reply_markup=markup_reply_ten)
    await Quests.quests.set()


async def quests(message, state):
    quests_lst = message.text.split('\n')
    db.update_info(message.from_user.id, 'quest', '.=.'.join(quests_lst))
    await bot.send_message(message.from_user.id,
                           '–•–æ—Ä–æ—à–æ, –º—ã –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –°–µ–π—á–∞—Å –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ª–∏—Å—Ç –Ω–∞ –≤–∞—à–µ–π –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.',
                           reply_markup=types.ReplyKeyboardRemove())
    ans = await create_sheet_questions(db.get_id_sheets(message.from_user.id), quests_lst)
    if '—Å–æ–∑–¥–∞–ª' in ans:
        await bot.send_message(message.from_user.id, '–ë–æ—Ç —Å–æ–∑–¥–∞–ª –ª–∏—Å—Ç –Ω–∞ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ. –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –Ω–∞–∂–º–∏—Ç–µ /settings\n'
                                                     '(–ë–ï–ó –≠–¢–û–ì–û –ë–û–¢ –ù–ï –ë–£–î–ï–¢ –í–ê–ú –°–õ–ê–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –í–û–ü–†–û–°–ê–•)')
    else:
        await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', ans)
        print(111151, ans)
    await state.finish()


async def stop_analysis_events(message, state):
    await state.finish()
    flag = db.get_flag(message.from_user.id)
    if flag.split("_")[0] == 'True':
        if int(flag.split("_")[1]) > 0:
            await bot.send_message(message.from_user.id,
                                   '–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ –≤—Å–µ –¥–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. '
                                   '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /analysis, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å')
        else:
            await bot.send_message(message.from_user.id,
                                   '–í—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –¥–æ–ª–≥–∞–º–∏. –ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å '
                                   '–°–ï–ì–û–ù–î–Ø–®–ù–ò–ô –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ /analysis')
    else:
        await bot.send_message(message.from_user.id,
                               '–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –¥–Ω–∏. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞.üëã')


async def check_events_and_days(message, day, event):
    events = db.get_events(message.from_user.id)[0][0].split(',')
    events.remove(event)
    db.update_info(message.from_user.id, 'events', ','.join(events))
    if not len(events):
        flag = db.get_flag(message.from_user.id)
        if flag.split("_")[0] == 'True':
            if int(flag.split("_")[1]) > 0:
                await bot.send_message(message.from_user.id, f'–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {day}, –Ω–æ –í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ –≤—Å–µ –¥–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. '
                                                             '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /analysis, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', reply_markup=types.ReplyKeyboardRemove())
            else:
                await bot.send_message(message.from_user.id, f'–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {day} –∏ –í—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –¥–æ–ª–≥–∞–º–∏. –ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å '
                                                             '–°–ï–ì–û–ù–î–Ø–®–ù–ò–ô –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ /analysis', reply_markup=types.ReplyKeyboardRemove())
        else:
            await bot.send_message(message.from_user.id, '–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≤—Å–µ –¥–Ω–∏. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞.üëã', reply_markup=types.ReplyKeyboardRemove())
    else:
        markup = clear_keyboard()
        markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π')
        for ev in events:
            markup.add(ev)
        await Event.event.set()
        await bot.send_message(message.from_user.id, f'–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ <b>"{event}"</b>, –Ω–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=markup)


async def analysis_events(tg_id, day, events):
    markup = clear_keyboard()
    markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π')
    for event in events[0][0].split(','):
        markup.add(event)
    await bot.send_message(tg_id, f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. {day} '
                                  f'—É –≤–∞—Å –±—ã–ª–∏ —Ç–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', reply_markup=markup)
    await Event.event.set()


async def event(message, state):
    events = db.get_events(message.from_user.id)[0][0].split(',')
    if message.text not in events:
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ò–ó –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!!!!')
    else:
        await state.finish()
        await Analysis_events.was.set()
        async with state.proxy() as data:
            data['events'] = events
            data['event'] = message.text
            await bot.send_message(message.from_user.id, f'–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n1Ô∏è‚É£. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>"{data["event"]}"</b> –±—ã–ª–æ?', reply_markup=markup_reply_five)


async def was(message, state):
    if message.text == '–û—Ç–º–µ–Ω–∏–ª–∏':
        async with state.proxy() as data:
            event_ = data['event']
            await state.finish()
        await check_events_and_days(message, db.get_temporary(message.from_user.id), event_)
    elif message.text == '–ë—ã–ª–æ':
        await bot.send_message(message.from_user.id,
                               '2Ô∏è‚É£. –û—Ç–ª–∏—á–Ω–æ, –æ—Ü–µ–Ω–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç 1 –¥–æ 10. (0 - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ—à–ª–æ –∫—Ä–∞–π–Ω–µ '
                               '–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ, 10 - —Ä–µ—à–∏–ª–∏ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ —Ç–æ–≥–æ.)', reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π'))
        await Analysis_events.next()
    else:
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.')


async def efficiency(message, state):
    if message.text.isdigit() and 1 <= int(message.text) <= 10:
        async with state.proxy() as data:
            data['efficiency'] = message.text
            await bot.send_message(message.from_user.id, '3Ô∏è‚É£. –•–æ—Ä–æ—à–æ! –ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏–ª–æ—Å—å –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?')
            await Analysis_events.next()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10</b>')


async def how_time(message, state):
    async with state.proxy() as data:
        await bot.send_message(message.from_user.id, f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data["event"]}'
                                                     f'\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data["efficiency"]}\n'
                                                     f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.text}\n–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞–º –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É', reply_markup=types.ReplyKeyboardRemove())
        result = await set_event_analysis(db.get_temporary(message.from_user.id), data["event"], data["efficiency"], message.text, db.get_id_sheets(message.from_user.id))
        await bot.send_message(message.from_user.id, result)
        event_ = data['event']
        await state.finish()
    await check_events_and_days(message, db.get_temporary(message.from_user.id), event_)


async def quest(message, markup_reply):
    await Days.value_of_day.set()
    await bot.send_message(message.from_user.id, '–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –¢–æ–ª—å–∫–æ –≤–æ—Ç –≤—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∞–ª–∏–∑ '
                               '–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π '
                               '–¥–µ–Ω—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ!',
                           reply_markup=markup_reply)


async def value_of_day(message, state):
    async with state.proxy() as data:
        data['days'] = db.get_pass_days(message.from_user.id)[0][0].split(',')
        if message.text not in data['days']:
            await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å –ò–ó –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!!!!')
        else:
            data['day'] = message.text
            await state.finish()
            await yn(message, data['day'])


async def yn(message, day=None):
    try:
        if db.get_every_day_quests_user(message.from_user.id)[0][0]:
            ans = await read(db.get_id_sheets(message.from_user.id))
            if not day: d = str(datetime.date.today())
            if day: d = copy.deepcopy(day)
            if not ans[-1][0] == d:
                dct[message.from_user.id] = day
                qsts = db.get_every_day_quests_user(message.from_user.id)[0][0]
                dct[f'{message.from_user.id}_'] = []
                await Answer_Every_Day.answer_every_day.set()
                await bot.send_message(message.from_user.id, qsts.split('Á†∫')[0], reply_markup=markup_reply_three)
            else:
                await bot.send_message(message.from_user.id, f'–í—ã —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –¥–µ–Ω—å, –¥–≤–∞–∂–¥—ã —Å–¥–µ–ª–∞—Ç—å '
                                                             '—ç—Ç–æ–≥–æ –Ω–µ–ª—å–∑—è‚ùóÔ∏è', reply_markup=types.ReplyKeyboardRemove())
        else:
            await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /edit_every_day')
    except Exception as e:
        await bot.send_message(message.from_user.id, '–í—Ä–µ–º–µ–Ω–Ω–∞ –æ—à–∏–±–∫–∞. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ....')
        await bot.send_message(1229555610, f'M-Error: {str(e)}')


async def answer_every_day(message, state):
    try:
        dct[f'{message.from_user.id}_'].append(message.text)
        qsts = db.get_every_day_quests_user(message.from_user.id)[0][0]
        if len(dct[f'{message.from_user.id}_']) == len(qsts.split('Á†∫')):
            await state.finish()
            await end_analysis(message)
        else:
            await bot.send_message(message.from_user.id, qsts.split('Á†∫')[len(dct[f'{message.from_user.id}_'])],
                                   reply_markup=markup_reply_three)
    except Exception as e:
        await bot.send_message(message.from_user.id, '–í—Ä–µ–º–µ–Ω–Ω–∞ –æ—à–∏–±–∫–∞. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ....')
        await bot.send_message(1229555610, f'P-Error: {str(e)}')


async def end_analysis(message):
    try:
        flag = False
        days = []
        spr = db.get_id_sheets(message.from_user.id)
        if not dct[message.from_user.id]: # –ï—Å–ª–∏ –±—ã–ª –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            dct[message.from_user.id] = str(datetime.date.today())
        else: # –ï—Å–ª–∏ –±—ã–ª –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            flag = True
            days = db.get_pass_days(message.from_user.id)
            days = days[0][0].split(',')
            days.remove(dct[message.from_user.id])
            days = ','.join(days)
            db.update_info(message.from_user.id, 'passs', days)
        ans = await everyday_answer(spr, dct[message.from_user.id], dct[f'{message.from_user.id}_'])
        await bot.send_message(message.from_user.id, ans, reply_markup=types.ReplyKeyboardRemove())
        events = get_events(db.get_id_calendar(message.from_user.id), dct[message.from_user.id])
        if events:
            db.update_info(message.from_user.id, 'flag', f'{str(flag)}_{len(days)}')
            db.update_info(message.from_user.id, 'events', ','.join(events))
            db.update_info(message.from_user.id, 'temporary', dct[message.from_user.id])
            await bot.send_message(message.from_user.id, f'–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–Ω—è {dct[message.from_user.id]}?', reply_markup=markup_inline_one)
        else: # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
            if flag: # –ï—Å–ª–∏ –±—ã–ª –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ù–ï —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
                if days: # –ï—Å–ª–∏ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –¥–Ω–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    await bot.send_message(message.from_user.id, '–í—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ –≤—Å–µ –¥–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. '
                                                                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /analysis, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å')
                else:
                    await bot.send_message(message.from_user.id, '–í—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –¥–æ–ª–≥–∞–º–∏. –ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å '
                                                             '–°–ï–ì–û–ù–î–Ø–®–ù–ò–ô –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ /analysis')
    except Exception as e:
        await bot.send_message(message.from_user.id,
                               '‚ùå –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫, –∫–∞–∫ –Ω—É–∂–Ω–æ. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ, '
                               '–≥–¥–µ –º—ã –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ @it_pavel_it',
                               reply_markup=markup_reply_three)
        await bot.send_message(1229555610, f'L-Error: {str(e)}')


async def get_sheets(message):
    await bot.send_message(message.from_user.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é?',
                            reply_markup=markup_reply_one)
    await Get_Sheets.your.set()


async def your(message, state):
    async with state.proxy() as data:
        data['variant'] = message.text
    if message.text == '–ú–æ—è —Ç–∞–±–ª–∏—Ü–∞':
        await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ. –†–∞–∑ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è —Ç–∞–±–ª–∏—Ü–∞ - –¥–∞–π—Ç–µ –µ–µ –º–Ω–µ. '
                                                     '–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ.\n'
                                                     '‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã '
                                                     '–±–æ—Ç—É, –∞ –ø–æ—Ç–æ–º - —Å–∫–∏–¥—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É. –ü–æ—á—Ç–∞ –±–æ—Ç–∞ - <u>account-519@oooo-359817.iam.gserviceaccount.com</u>')
        await Get_Sheets.next()
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é':
        await bot.send_message(message.from_user.id, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.\n'
                                                     '‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!‚ùóÔ∏è\n–í–∞—à–∞ –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å Google, —Ç–æ –µ—Å—Ç—å –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è'
                                                     ' –Ω–∞ @gmail.com\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ—á—Ç—É, –∏–Ω–∞—á–µ –≤—ã –Ω–µ '
                                                     '–ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ —Å –¥–∞–Ω–Ω—ã–º–∏.',
                               reply_markup=markup_reply_one)
        await Get_Sheets.next()
    else:
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. '
                                                      '–ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ —ç—Ç–æ –º–µ–Ω—é —Å–ª—É—á–∞–π–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ '
                                                      '"–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"')


async def link(message, state):
    async with state.proxy() as data:
        try:
            if data['variant'] == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã':
                await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ. –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–∞–Ω–¥–æ–π '
                                                             '/sheets',
                                       reply_markup=types.ReplyKeyboardRemove())
                await state.finish()
                return
            elif data['variant'] == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é':
                email = message.text
                if '@gmail.com' not in email:
                    raise EmailError
                await bot.send_message(message.from_user.id,
                                       '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–π—Ç–µ –±–æ—Çy –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ‚è≥')
                result = await create_table(email)
                if '—Å–ø–∞—Å–∏–±–æ' in result.lower():
                    sh = result.split('—Ç–∞–±–ª–∏—Ü—É - ')[1].split('/d/')[1].split('\n')[0]
                    db.update_info(message.from_user.id, 'sheets', sh)
                    await bot.send_message(message.from_user.id, result,
                                           reply_markup=types.ReplyKeyboardRemove())
                    await state.finish()
                else:
                    await bot.send_message(message.from_user.id, result)
            elif data['variant'] == '–ú–æ—è —Ç–∞–±–ª–∏—Ü–∞':
                res = await add_sheet(message.text.split('/d/')[1].split('/edit')[0])
                if '–°–ø–∞—Å–∏–±–æ' in res: db.update_info(message.from_user.id, 'sheets', message.text.split('/d/')[1].split('/edit')[0])
                await bot.send_message(message.from_user.id, res)
                await state.finish()
        except (EmailError, IndexError):
            await bot.send_message(
                message.from_user.id,
                '‚ùóÔ∏è–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –ø–æ—á—Ç—É.‚ùóÔ∏è\ndurov@gmail.com\n'
                '–ü—Ä–∏–º–µ—Ä –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å', reply_markup=markup_reply_one)


async def calendar_state(message):
    await bot.send_message(message.from_user.id, '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—É–≥–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–∞–º –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å '
                                                 '–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤.\n1Ô∏è‚É£. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è 2. (–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–≤–µ–¥–µ–Ω–∏—è–º –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö)'
                                                 '. –≠—Ç–æ–π –ø–æ—á—Ç–µ - friends-project@friends-project-359817.iam.gserviceaccount.com\n'
                                                 '2Ô∏è‚É£. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–≤ —Å–∞–º–æ–º –Ω–∏–∑—É) –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b> –∏ —Å–∫–æ–ø—Ä–∏—Ä—É–π—Ç–µ <b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n'
                                                 '3Ô∏è‚É£. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. ', reply_markup=markup_reply_six)
    await Get_calendar.id_calendar.set()


async def id_calendar(message, state):
    result = add_calendar(message.text)
    if '—Å–ø–∞—Å–∏–±–æ' in result.lower():
        await state.finish()
        db.update_info(message.from_user.id, 'calendar', message.text)
        result = await create_sheet_calendar(db.get_id_sheets(message.from_user.id))
        if '—Å–æ–∑–¥–∞–ª' in result.lower():
            await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n' + result, reply_markup=types.ReplyKeyboardRemove())
        else:
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    else:
        await bot.send_message(message.from_user.id, result)